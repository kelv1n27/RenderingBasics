__kernel void Render(__global int* screen, __global int* texture, int2 screenCoords, int2 screenSize, int2 textureCoords, int2 textureSize, 
					float2 textureScale, int2 flip, int2 renderSize, float alphaShift){
					
	int screenx = screenCoords.x + get_global_id(0);
	if (screenx >= 0 && screenx < screenSize.x){
		int screeny = screenCoords.y + get_global_id(1);
		if (screeny >= 0 && screeny < screenSize.y){
			int texturex = (textureCoords.x + (flip.x==0?(int)(get_global_id(0)/textureScale.x):(int)((renderSize.x - get_global_id(0)-1)/textureScale.x)))%textureSize.x;
			int texturey = (textureCoords.y + (flip.y==0?(int)(get_global_id(1)/textureScale.y):(int)((renderSize.y - get_global_id(1)-1)/textureScale.y)))%textureSize.y;
			int screenColor = screen[(screeny*screenSize.x)+screenx];
			int4 screenColorVec = (int4)((screenColor >> 24) & 0xff, (screenColor >> 16) & 0xff, (screenColor >> 8) & 0xff, screenColor & 0xff);
			
			int texColor = texture[(texturey*textureSize.x)+texturex];
			int4 texColorVec = (int4)(min(0xff, (int)(((texColor >> 24) & 0xff) * alphaShift)), (texColor >> 16) & 0xff, (texColor >> 8) & 0xff, texColor & 0xff);
			
			float4 screenInfluence = (float4)(1, (0xff - texColorVec.x)/(float)0xff, (0xff - texColorVec.x)/(float)0xff, (0xff - texColorVec.x)/(float)0xff);
			float4 texInfluence = (float4)(1, (float)texColorVec.x/0xff, (float)texColorVec.x/0xff, (float)texColorVec.x/0xff);
			screenColorVec = convert_int4(convert_float4(screenColorVec) * screenInfluence);
			texColorVec = convert_int4(convert_float4(texColorVec) * texInfluence);
			int4 newColor = screenColorVec + texColorVec;
			screen[(screeny*screenSize.x)+screenx] = 
				(clamp(newColor.x, 0, 255) << 24) +
				(clamp(newColor.y, 0, 255) << 16) +
				(clamp(newColor.z, 0, 255) << 8) +
				clamp(newColor.w, 0, 255);
		}
	}
}